@typeparam T

<CustomTypeahead SearchMethod="@((string value) => SearchMethod(value))"
                    Value="@sampleItem"
                    ValueChanged="@((T item) => SelectElement(item))">
    <ResultTemplate>
        @MyResultTemplate(context)
    </ResultTemplate>
</CustomTypeahead>

<ul class="list-group">
    @foreach (var item in SelectElements)
    {
        <li draggable="true"
            @ondragstart="@(() => HandleDragStart(item))"
            @ondragover="@(() => HandleDragOver(item))"
            class="list-group-item list-group-item-action">
            @MyListTemplate(item)
            <span @onclick="@(() => SelectElements.Remove(item))"
                  class="badge badge-primary badge-pill"
                  style="cursor: pointer">X</span>
        </li>
    }
</ul>

@code {

    [Parameter] public List<T> SelectElements { get; set; } = new List<T>();
    [Parameter] public Func<string, Task<IEnumerable<T>>> SearchMethod { get; set; }
    [Parameter] public RenderFragment<T> MyResultTemplate { get; set; }
    [Parameter] public RenderFragment<T> MyListTemplate { get; set; }

    T sampleItem = default(T);
    T dragItem;

    private void HandleDragStart(T item)
    {
        dragItem = item;
    }

    private void HandleDragOver(T item)
    {
        if (!item.Equals(dragItem))
        {
            var index = SelectElements.IndexOf(dragItem);
            var element = SelectElements.IndexOf(item);
            SelectElements[element] = dragItem;
            SelectElements[index] = item;
        }
    }

    private void SelectElement(T item)
    {
        if (!SelectElements.Any(x => x.Equals(item)))
        {
            SelectElements.Add(item);
        }
        sampleItem = default(T);
    }
}
