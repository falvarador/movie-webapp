@page "/person"

@inject IBaseService baseService
@inject IShowMessage showMessage

<h3>People</h3>

<div class="form-group">
    <a class="btn btn-info" href="/person/create">Add new person</a>
</div>

@* <Paginacion PaginaActual="paginaActual" PaginaSeleccionada="paginaSeleccionada"
            PaginasTotales="paginasTotales"></Paginacion> *@

<GenericList Records="People">
    <CompleteFound>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Name</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var person in People)
                {
                    <tr>
                        <td>
                            <a href="person/update/@person.Id" class="btn btn-success">Update</a>
                            <button @onclick="@(() => DeletePerson(person))" class="btn btn-danger">Delete</button>
                        </td>
                        <td>@person.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </CompleteFound>
</GenericList>

@code {
    public List<PersonViewModel> People { get; set; } = new List<PersonViewModel>();
    private int currentPage = 1;
    @* private int totalPages; *@

    protected async override Task OnInitializedAsync()
    {
        await LoadPeople();
    }

    private async Task selectPage(int page)
    {
        currentPage = page;
        await LoadPeople(page);
    }

    private async Task LoadPeople(int page = 1)
    {
        var httpResponse = await baseService.GetAsync<List<PersonViewModel>>($"http://localhost:5000/api/v1/people"); // ?pagina={page}
        if (!httpResponse.Error)
        {
            People = httpResponse.Response;
            @* var conteo = httpResponse.HttpResponseMessage.Headers.GetValues("conteo").FirstOrDefault();
            totalPages = int.Parse(httpResponse.HttpResponseMessage.Headers.GetValues("totalPaginas").FirstOrDefault()); *@
        }
    }

    private async Task DeletePerson(PersonViewModel person)
    {
        var httpResponse = await baseService.DeleteAsync($"http://localhost:5000/api/v1/people/{person.Id}");
        if (httpResponse.Error)
        {
            await showMessage.ShowErrorMessage(await httpResponse.GetBody());
        }
        else
        {
            await LoadPeople();
        }

    }
}
